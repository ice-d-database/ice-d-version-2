# Generated by Django 3.2.6 on 2021-12-06 22:49

import autoslug.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Application",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("image", models.CharField(default="star_image.jpg", max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("map_image", models.TextField(blank=True, null=True)),
                ("interactive_map", models.BooleanField(default=False)),
                ("page_alert", models.TextField(blank=True, null=True)),
                ("credits", models.TextField(blank=True, null=True)),
                ("NSF_funding", models.BooleanField(default=False)),
                ("calibration_data_sets", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Be10Al26Quartz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("chem_lab", models.TextField(blank=True, null=True)),
                ("chem_lab_date", models.DateField(blank=True, null=True)),
                ("chem_lab_id", models.TextField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("Be_AMS_lab", models.TextField(blank=True, null=True)),
                ("Be_AMS_date", models.DateField(blank=True, null=True)),
                ("Be_AMS_lab_id", models.TextField(blank=True, null=True)),
                ("N10_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN10_atoms_g", models.FloatField(blank=True, null=True)),
                ("N10b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("delN10b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("Be10_std", models.TextField(blank=True, null=True)),
                ("qtz_Al_ppm", models.FloatField(blank=True, null=True)),
                ("delqtz_Al_ppm", models.FloatField(blank=True, null=True)),
                ("Al_AMS_lab", models.TextField(blank=True, null=True)),
                ("Al_AMS_date", models.DateField(blank=True, null=True)),
                ("Al_AMS_lab_id", models.TextField(blank=True, null=True)),
                ("N26_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN26_atoms_g", models.FloatField(blank=True, null=True)),
                ("N26b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("delN26b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("Al26_std", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "_be10_al26_quartz",
            },
        ),
        migrations.CreateModel(
            name="C14Quartz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("extraction_date", models.DateField(blank=True, null=True)),
                ("analysis_date", models.DateField(blank=True, null=True)),
                ("N14_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN14_atoms_g", models.FloatField(blank=True, null=True)),
                ("extraction_lab", models.TextField(blank=True, null=True)),
                ("AMS_lab", models.TextField(blank=True, null=True)),
                ("extraction_lab_id", models.TextField(blank=True, null=True)),
                ("AMS_lab_id", models.TextField(blank=True, null=True)),
                ("AMS_date", models.DateField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("N14b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("delN14b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("standard", models.TextField(blank=True, null=True)),
                ("std_N14c_atoms_g", models.FloatField(blank=True, null=True)),
                ("std_delN14c_atoms_g", models.FloatField(blank=True, null=True)),
                ("C_mass_ug", models.FloatField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "_c14_quartz",
            },
        ),
        migrations.CreateModel(
            name="Calculation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, unique=True)),
                ("calculation_service_endpoint", models.CharField(max_length=255)),
                ("variable_json", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CalibrationData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("nuclide", models.CharField(max_length=50)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Cl36",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("mineral", models.TextField(blank=True, null=True)),
                ("chem_lab", models.TextField(blank=True, null=True)),
                ("chem_lab_date", models.DateField(blank=True, null=True)),
                ("chem_lab_id", models.TextField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("Cl_AMS_lab", models.TextField(blank=True, null=True)),
                ("Cl_AMS_date", models.DateField(blank=True, null=True)),
                ("Cl_AMS_lab_id", models.TextField(blank=True, null=True)),
                ("N36_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN36_atoms_g", models.FloatField(blank=True, null=True)),
                ("target_Cl_ppm", models.FloatField(blank=True, null=True)),
                ("deltarget_Cl_ppm", models.FloatField(blank=True, null=True)),
                ("Cl_covariance", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("formation_age_Ma", models.FloatField(blank=True, null=True)),
                ("delformation_age_Ma", models.FloatField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "_cl36",
            },
        ),
        migrations.CreateModel(
            name="Continent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=False, populate_from="name", unique_with=["name"]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Core",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=50)),
                ("description", models.TextField()),
                ("lat_DD", models.DecimalField(decimal_places=10, max_digits=13)),
                ("lon_DD", models.DecimalField(decimal_places=10, max_digits=13)),
                ("elv_m", models.FloatField()),
                ("shielding", models.FloatField(blank=True, null=True)),
                ("what", models.TextField(blank=True, null=True)),
                ("shielding_azimuths", models.TextField(blank=True, null=True)),
                ("shielding_elevations", models.TextField(blank=True, null=True)),
                ("strike", models.FloatField(blank=True, null=True)),
                ("dip", models.FloatField(blank=True, null=True)),
                ("date_collected", models.DateField(blank=True, null=True)),
                ("collected_by", models.TextField(blank=True, null=True)),
                ("local_ice_surface_m", models.FloatField(blank=True, null=True)),
                ("ice_cover_thickness_gcm2", models.FloatField(blank=True, null=True)),
                ("ice_cover_thickness_m", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("surfpt_id", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CoreSample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255, unique=True)),
                ("top_depth_cm", models.FloatField(blank=True, null=True)),
                ("bot_depth_cm", models.FloatField(blank=True, null=True)),
                ("top_depth_gcm2", models.FloatField(blank=True, null=True)),
                ("bot_depth_gcm2", models.FloatField(blank=True, null=True)),
                ("measured_density", models.FloatField(blank=True, null=True)),
                ("lithology", models.TextField(blank=True, null=True)),
                ("sediment_conc_wtwt", models.FloatField(blank=True, null=True)),
                ("quartz_extracted_g", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                (
                    "core",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.core"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataFileMigration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("applied", models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("file_name", models.TextField(blank=True, null=True)),
                ("url_path", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="FundingSource",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("funding_source_name", models.TextField(blank=True, null=True)),
                (
                    "funding_source_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("people_involved", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="ImageUrlPath",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("path", models.CharField(max_length=255)),
                ("thumb_path", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("last_id", models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("project", models.TextField(blank=True, null=True)),
                ("people", models.TextField(blank=True, null=True)),
                ("NSF_title", models.TextField(blank=True, null=True)),
                (
                    "year",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, "You must select a year higher than 1900"
                            ),
                            django.core.validators.MaxValueValidator(
                                2100, "You must select a year before 2100"
                            ),
                        ],
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.application",
                    ),
                ),
                (
                    "funding_sources",
                    models.ManyToManyField(
                        related_name="funding_sources", to="base.FundingSource"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("short_name", models.CharField(max_length=255)),
                ("bibtex_record", models.TextField(blank=True, null=True)),
                (
                    "year",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1900, "You must select a year higher than 1900"
                            ),
                            django.core.validators.MaxValueValidator(
                                2100, "You must select a year before current year"
                            ),
                        ],
                    ),
                ),
                ("doi", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.application",
                    ),
                ),
            ],
            options={
                "unique_together": {("year", "short_name", "doi")},
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=False, populate_from="name", unique_with=["name"]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Sample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255, unique=True)),
                ("lat_DD", models.DecimalField(decimal_places=10, max_digits=13)),
                ("lon_DD", models.DecimalField(decimal_places=10, max_digits=13)),
                ("elv_m", models.FloatField()),
                ("shielding", models.FloatField(blank=True, null=True)),
                ("thick_cm", models.FloatField(blank=True, null=True)),
                ("lithology", models.TextField(blank=True, null=True)),
                ("density", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("what", models.TextField(blank=True, null=True)),
                ("collected_by", models.TextField(blank=True, null=True)),
                ("date_collected", models.DateField(blank=True, null=True)),
                ("shielding_azimuths", models.TextField(blank=True, null=True)),
                ("shielding_elevations", models.TextField(blank=True, null=True)),
                ("local_ice_surface_m", models.FloatField(blank=True, null=True)),
                ("USPRR_DB_id", models.TextField(blank=True, null=True)),
                ("surface_strike", models.FloatField(blank=True, null=True)),
                ("surface_dip", models.FloatField(blank=True, null=True)),
                ("surfpt_id", models.CharField(blank=True, max_length=255, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Sector",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255, unique=True)),
                (
                    "slug",
                    autoslug.fields.AutoSlugField(
                        editable=False, populate_from="name", unique_with=["name"]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserFieldsProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("field_name", models.TextField(blank=True, null=True)),
                ("owner", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("units", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="UThQuartz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("U_ppm", models.FloatField(blank=True, null=True)),
                ("Th_ppm", models.FloatField(blank=True, null=True)),
                ("lab", models.TextField(blank=True, null=True)),
                ("analysis_type", models.TextField(blank=True, null=True)),
                ("analysis_date", models.DateField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_u_th_quartz",
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.application",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User Permissions",
            },
        ),
        migrations.CreateModel(
            name="Updates",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when", models.DateTimeField(blank=True, null=True)),
                (
                    "table_affected",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "sample_name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("complete", models.BooleanField(default=False)),
                ("user", models.CharField(blank=True, max_length=255, null=True)),
                ("user2", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TraceElement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("Li_ppm", models.FloatField(blank=True, null=True)),
                ("B_ppm", models.FloatField(blank=True, null=True)),
                ("Cl_ppm", models.FloatField(blank=True, null=True)),
                ("Cr_ppm", models.FloatField(blank=True, null=True)),
                ("Co_ppm", models.FloatField(blank=True, null=True)),
                ("Sm_ppm", models.FloatField(blank=True, null=True)),
                ("Gd_ppm", models.FloatField(blank=True, null=True)),
                ("Th_ppm", models.FloatField(blank=True, null=True)),
                ("delTh_ppm", models.FloatField(blank=True, null=True)),
                ("U_ppm", models.FloatField(blank=True, null=True)),
                ("delU_ppm", models.FloatField(blank=True, null=True)),
                ("analysis_type", models.TextField(blank=True, null=True)),
                ("lab", models.TextField(blank=True, null=True)),
                ("lab_code", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_trace_element",
            },
        ),
        migrations.CreateModel(
            name="Site",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("short_name", models.CharField(max_length=255)),
                ("name", models.TextField(blank=True, null=True)),
                ("what", models.TextField(blank=True, null=True)),
                ("dist_from_ice_margin_km", models.FloatField(blank=True, null=True)),
                ("ht_above_ice_margin_m", models.FloatField(blank=True, null=True)),
                ("implied_thickening_m", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("range", models.TextField(blank=True, null=True)),
                ("glacier", models.TextField(blank=True, null=True)),
                ("site_min_truet", models.FloatField(blank=True, null=True)),
                ("site_del_min_truet", models.FloatField(blank=True, null=True)),
                ("site_max_truet", models.FloatField(blank=True, null=True)),
                ("site_del_max_truet", models.FloatField(blank=True, null=True)),
                ("site_truet", models.FloatField(blank=True, null=True)),
                ("site_del_truet", models.FloatField(blank=True, null=True)),
                ("annavg_SWE_cm", models.FloatField(blank=True, null=True)),
                ("erosional_relief_cm", models.FloatField(blank=True, null=True)),
                ("del_erosional_relief_cm", models.FloatField(blank=True, null=True)),
                ("faultsystem", models.TextField(blank=True, null=True)),
                (
                    "fault_short_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "_temp_application_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "continent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.continent",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.project",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.region",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="base.sector",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Sites",
            },
        ),
        migrations.CreateModel(
            name="SampleUserData",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("field_name", models.TextField(blank=True, null=True)),
                ("field_value", models.TextField(blank=True, null=True)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SamplePublicationsMatch",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "core_sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.coresample",
                    ),
                ),
                (
                    "publication",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.publication",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SampleDocumentMatch",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "coresample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.coresample",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.document"
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sample",
            name="site",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.site",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="samples",
            field=models.ManyToManyField(related_name="samples", to="base.Sample"),
        ),
        migrations.CreateModel(
            name="Ne21Quartz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("analysis_date", models.DateField(blank=True, null=True)),
                ("N21xs_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN21xs_atoms_g", models.FloatField(blank=True, null=True)),
                ("N21inh_est_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN21inh_est_atoms_g", models.FloatField(blank=True, null=True)),
                ("system", models.TextField(blank=True, null=True)),
                ("standard", models.TextField(blank=True, null=True)),
                ("std_N21c_atoms_g", models.IntegerField(blank=True, null=True)),
                ("std_delN21c_atoms_g", models.IntegerField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_ne21_quartz",
            },
        ),
        migrations.CreateModel(
            name="MajorElement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("what", models.TextField(blank=True, null=True)),
                ("LOI_pct_wt", models.FloatField(blank=True, null=True)),
                ("H_pct_wt", models.FloatField(blank=True, null=True)),
                ("C_pct_wt", models.FloatField(blank=True, null=True)),
                ("O_pct_wt", models.FloatField(blank=True, null=True)),
                ("Na_pct_wt", models.FloatField(blank=True, null=True)),
                ("Mg_pct_wt", models.FloatField(blank=True, null=True)),
                ("Al_pct_wt", models.FloatField(blank=True, null=True)),
                ("Si_pct_wt", models.FloatField(blank=True, null=True)),
                ("P_pct_wt", models.FloatField(blank=True, null=True)),
                ("S_pct_wt", models.FloatField(blank=True, null=True)),
                ("K_pct_wt", models.FloatField(blank=True, null=True)),
                ("delK_pct_wt", models.FloatField(blank=True, null=True)),
                ("Ca_pct_wt", models.FloatField(blank=True, null=True)),
                ("delCa_pct_wt", models.FloatField(blank=True, null=True)),
                ("Ti_pct_wt", models.FloatField(blank=True, null=True)),
                ("delTi_pct_wt", models.FloatField(blank=True, null=True)),
                ("Mn_pct_wt", models.FloatField(blank=True, null=True)),
                ("Fe_pct_wt", models.FloatField(blank=True, null=True)),
                ("delFe_pct_wt", models.FloatField(blank=True, null=True)),
                ("analysis_type", models.TextField(blank=True, null=True)),
                ("lab", models.TextField(blank=True, null=True)),
                ("lab_code", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_major_element",
            },
        ),
        migrations.CreateModel(
            name="ImageFilesCores",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("caption", models.TextField(blank=True, null=True)),
                ("photographer", models.TextField(blank=True, null=True)),
                ("photo_filename", models.TextField(blank=True, null=True)),
                ("display_photo_filename", models.TextField(blank=True, null=True)),
                ("urlpath", models.TextField(blank=True, null=True)),
                ("top_depth_cm", models.FloatField(blank=True, null=True)),
                ("bot_depth_cm", models.FloatField(blank=True, null=True)),
                (
                    "core",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.core",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImageFile",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("caption", models.TextField(blank=True, null=True)),
                ("photo_file_id", models.TextField(blank=True, null=True)),
                ("photographer", models.TextField(blank=True, null=True)),
                ("photo_filename", models.TextField(blank=True, null=True)),
                ("display_photo_filename", models.TextField(blank=True, null=True)),
                ("urlpath", models.TextField(blank=True, null=True)),
                (
                    "image_type",
                    models.CharField(
                        choices=[
                            ("FIELD_IMAGE", "Field Image"),
                            ("LAB_IMAGE", "Lab Image"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "image_url_path",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.imageurlpath",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="He3Quartz",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("analysis_date", models.DateField(blank=True, null=True)),
                ("N3c_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN3c_atoms_g", models.FloatField(blank=True, null=True)),
                ("system", models.TextField(blank=True, null=True)),
                ("standard", models.TextField(blank=True, null=True)),
                ("std_N3_atoms_g", models.FloatField(blank=True, null=True)),
                ("std_delN3_atoms_g", models.FloatField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("min_gs_um", models.FloatField(blank=True, null=True)),
                ("max_gs_um", models.FloatField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_he3_quartz",
            },
        ),
        migrations.CreateModel(
            name="He3Pxol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.TextField(blank=True, null=True)),
                ("mineral", models.TextField(blank=True, null=True)),
                ("aliquot_wt_g", models.FloatField(blank=True, null=True)),
                ("analysis_date", models.DateField(blank=True, null=True)),
                ("N3c_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN3c_atoms_g", models.FloatField(blank=True, null=True)),
                ("system", models.TextField(blank=True, null=True)),
                ("standard", models.TextField(blank=True, null=True)),
                ("std_N3_atoms_g", models.FloatField(blank=True, null=True)),
                ("std_delN3_atoms_g", models.FloatField(blank=True, null=True)),
                ("analyst", models.TextField(blank=True, null=True)),
                ("comments", models.TextField(blank=True, null=True)),
                ("N4_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN4_atoms_g", models.FloatField(blank=True, null=True)),
                ("N3inh_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN3inh_atoms_g", models.FloatField(blank=True, null=True)),
                ("min_gs_um_initial", models.FloatField(blank=True, null=True)),
                ("max_gs_um_initial", models.FloatField(blank=True, null=True)),
                ("min_gs_um_after_crush", models.FloatField(blank=True, null=True)),
                ("max_gs_um_after_crush", models.FloatField(blank=True, null=True)),
                ("N3total_atoms_g", models.FloatField(blank=True, null=True)),
                ("delN3total_atoms_g", models.FloatField(blank=True, null=True)),
                ("closure_age_Ma", models.FloatField(blank=True, null=True)),
                ("delclosure_age_Ma", models.FloatField(blank=True, null=True)),
                ("N3b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("delN3b_subtracted_atoms", models.FloatField(blank=True, null=True)),
                ("analysis_method", models.FloatField(blank=True, null=True)),
                ("r_factor", models.FloatField(blank=True, null=True)),
                ("_temp_sample_name", models.CharField(max_length=255)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
            options={
                "db_table": "_he3_pxol",
            },
        ),
        migrations.CreateModel(
            name="GroupPermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "application",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.application",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth.group",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Group Permissions",
            },
        ),
        migrations.AddField(
            model_name="document",
            name="publications",
            field=models.ManyToManyField(to="base.Publication"),
        ),
        migrations.CreateModel(
            name="CoresampleNuclideMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "be10_al26_quartz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.be10al26quartz",
                    ),
                ),
                (
                    "c14_quartz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.c14quartz",
                    ),
                ),
                (
                    "cl36",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.cl36",
                    ),
                ),
                (
                    "coresample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.coresample",
                    ),
                ),
                (
                    "he3_pxol",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.he3pxol",
                    ),
                ),
                (
                    "he3_quartz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.he3quartz",
                    ),
                ),
                (
                    "major_element",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.majorelement",
                    ),
                ),
                (
                    "ne21_quartz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.ne21quartz",
                    ),
                ),
                (
                    "trace_element",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.traceelement",
                    ),
                ),
                (
                    "u_th_quartz",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.uthquartz",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="core",
            name="site",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="cores",
                to="base.site",
            ),
        ),
        migrations.AddField(
            model_name="cl36",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.sample",
            ),
        ),
        migrations.CreateModel(
            name="CalibrationDataSample",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("aliquot", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "calibration_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.calibrationdata",
                    ),
                ),
                (
                    "sample",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="base.sample"
                    ),
                ),
            ],
            options={
                "unique_together": {("calibration_data", "sample", "aliquot")},
            },
        ),
        migrations.AddField(
            model_name="calibrationdata",
            name="publication",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="base.publication"
            ),
        ),
        migrations.AddField(
            model_name="calibrationdata",
            name="samples",
            field=models.ManyToManyField(
                related_name="cd_samples",
                through="base.CalibrationDataSample",
                to="base.Sample",
            ),
        ),
        migrations.CreateModel(
            name="CalculatedAges",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("when_updated", models.DateTimeField(auto_now=True, null=True)),
                ("nuclide", models.TextField(blank=True, null=True)),
                ("t_St", models.FloatField(blank=True, null=True)),
                ("dtint_St", models.FloatField(blank=True, null=True)),
                ("dtext_St", models.FloatField(blank=True, null=True)),
                ("t_Lm", models.FloatField(blank=True, null=True)),
                ("dtint_Lm", models.FloatField(blank=True, null=True)),
                ("dtext_Lm", models.FloatField(blank=True, null=True)),
                ("t_LSDn", models.FloatField(blank=True, null=True)),
                ("dtint_LSDn", models.FloatField(blank=True, null=True)),
                ("dtext_LSDn", models.FloatField(blank=True, null=True)),
                ("Nnorm_St", models.FloatField(blank=True, null=True)),
                ("dNnorm_St", models.FloatField(blank=True, null=True)),
                ("dNnorm_ext_St", models.FloatField(blank=True, null=True)),
                ("Nnorm_Lm", models.FloatField(blank=True, null=True)),
                ("dNnorm_Lm", models.FloatField(blank=True, null=True)),
                ("dNnorm_ext_Lm", models.FloatField(blank=True, null=True)),
                ("Nnorm_LSDn", models.FloatField(blank=True, null=True)),
                ("dNnorm_LSDn", models.FloatField(blank=True, null=True)),
                ("dNnorm_ext_LSDn", models.FloatField(blank=True, null=True)),
                (
                    "sample_unique",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="c14quartz",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.sample",
            ),
        ),
        migrations.CreateModel(
            name="Be_stds",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("std_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cf", models.FloatField(blank=True, null=True)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="be10al26quartz",
            name="sample",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="base.sample",
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="sites",
            field=models.ManyToManyField(related_name="sites", to="base.Site"),
        ),
        migrations.CreateModel(
            name="Al_stds",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("std_name", models.CharField(blank=True, max_length=255, null=True)),
                ("cf", models.FloatField(blank=True, null=True)),
                (
                    "sample",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.sample",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FieldProperName",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table_name", models.CharField(blank=True, max_length=255, null=True)),
                ("field_name", models.CharField(blank=True, max_length=255, null=True)),
                ("format_string", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "application",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="base.application",
                    ),
                ),
            ],
            options={
                "unique_together": {("table_name", "field_name", "application")},
            },
        ),
    ]
